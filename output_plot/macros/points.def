subcode: parse_set_point
    my %points
    my ($origin, $rotate)
    $call parse_set_point_param
    $call parse_set_point_codelist
    $call parse_set_point_output

#---- param ------------------------------------ 
subcode: parse_set_point_param
    my $macros1={}
    my @tlist=MyDef::utils::proper_split /,\s*/, $param
    my $loop_list
    $foreach $t in @tlist
        $if $t=~/^([ijk])=(.+)/
            $call populate_loop_list
        $elif $t=~/^origin\s*\((\S+),\s*(\S+)\)/
            $origin=[$1, $2]
        $elif $t=~/^rotate\s*(\S+)/
            $rotate=$1
        $elif $t=~/^(\w+)=(.+)/
            $macros1->{$1}=$2

    # ------------------------
    subcode: populate_loop_list
        my @t_loops
        my $v=$1
        my @ilist=split /:/, $2
        $if @ilist==2
            $for my $i=$ilist[0];$i<$ilist[1];$i++
                push @t_loops, "$v=$i"
        $elif @ilist==3
            $for my $i=$ilist[0];$i<$ilist[1];$i+=$ilist[2]
                push @t_loops, "$v=$i"
        $if @t_loops
            $if !$loop_list
                $loop_list=\@t_loops
            $else
                my @t
                $foreach $t1 in @t_loops
                    $foreach $t2 in @$loop_list
                        push @t, "$t2, $t1"
                $loop_list=\@t

#---- codelist ------------------------------------ 
subcode: parse_set_point_codelist
    $if !$loop_list
        $loop_list=[""]
        
    $foreach $t in @$loop_list
        my $macros2={}
        $while $t=~/(\w+)=(\d+)/g
            $macros2->{$1}=$2

        reset_eqns()

        $foreach $l in @$codelist
            $if $l!~/^SOURCE/
                $call parse_line

    # -----------------------
    subcode: parse_line
        #  x1, y1, z1 or  x1a, x1l or name_x1t
        $if $l=~/(.+)=(.+)/
            my ($t1, $t2)=($1, $2)
            my $left=parse_expr($t1, $macros1, $macros2)
            my $right=parse_expr($t2, $macros1, $macros2)
            $if $left->[1] eq "list" and $right->[1] eq "list"
                my $n1=@{$left->[0]}
                $if $n1==@{$right->[0]}
                    $for $i=0:$n1
                        parse_eqn($left->[0]->[$i], $right->[0]->[$i], $macros2, \%points)
                $else
                    die "list assignment mismatch ($n1)\n"
            $else
                parse_eqn($left, $right, $macros2, \%points)
        $else
            # skip
            
#---- output ------------------
subcode: parse_set_point_output
    $if %points
        $call sort_zlist
        $call @check_rotate
        $call @check_orgin
        $call output

    subcode: sort_zlist
        my @zlist
        $foreach $p in sort keys %points
            $if defined $points{$p}
                my ($pre, $xyz, $tail)=parse_point_name($p)
                my $x=$pre.'x'.$tail
                my $y=$pre.'y'.$tail
                push @zlist, [$x, $y, $points{$x}, $points{$y}]
                $points{$x}=undef
                $points{$y}=undef

    subcode: check_origin
        $if $origin
            $foreach $z in @zlist
                $z->[2]+=$origin->[0]
                $z->[3]+=$origin->[1]

    subcode: check_rotate
        $if $rotate
            my $s=sin($rotate*3.14159265/180.0)
            my $c=cos($rotate*3.14159265/180.0)
            $foreach $z in @zlist
                my $x = $c * $z->[2] - $s * $z->[3]
                my $y = $s * $z->[2] + $c * $z->[3]
                $z->[2] = $x
                $z->[3] = $y

    subcode: output
        push @$out, "\n"
        $foreach $z in @zlist
            $(if:0)
                push @$out, "my \$$z->[0] = $z->[2];\n"
                push @$out, "my \$$z->[1] = $z->[3];\n"
            $(else)
                push @$out, "my (\$$z->[0], \$$z->[1]) = ($z->[2], $z->[3]);\n"
        push @$out, "\n"


########################################
fncode: parse_point_name($v, $macros)
    my ($pre, $xyz, $tail)
    $if $v=~/^([xyz])(\w*)/
        ($pre, $xyz, $tail)=("", $1, $2)
    $elif $v=~/^(\w+_)([xyz])(\w*)/
        ($pre, $xyz, $tail)=($1, $2, $3)
    $else
        return

    $if $tail
        $(for:i in i,j,k)
            $if $macros->{$(i)}
                $tail=~s/$(i)/$macros->{$(i)}/g

    return ($pre, $xyz, $tail)

