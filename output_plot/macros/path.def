
fncode: parse_path($param)
    $call split_path
    $call parse_plist
    $call @trivial_case
    $call solve

    subcode: solve
        push @$out, "my \@path;\n"
        $if $has_cycle
            $plist[0]->{cycle}=1
        $foreach $t in @plist
            my @t
            $foreach $k in sort keys %$t
                push @t, "\"$k\"=>$t->{$k}"
            push @$out, "push \@path, {".join(', ', @t)."};\n"
        push @$out, "myplot::solve_path(\\\@path);\n"
        MyDef::compileutil::call_sub("draw_path")

    # --------------------
    subcode: trivial_case
        $if @plist == 2
            $if $plist[0]->{"control+x"} && $plist[1]->{"control-x"}
                my $t="moveto, $plist[0]->{x}, $plist[0]->{y}"
                MyDef::compileutil::call_sub($t)
                my $t="curveto, "
                $t .= $plist[0]->{"control+x"}.", "
                $t .= $plist[0]->{"control+y"}.", "
                $t .= $plist[1]->{"control-x"}.", "
                $t .= $plist[1]->{"control-y"}.", "
                $t .= "$plist[1]->{x}, $plist[1]->{y}"
                MyDef::compileutil::call_sub($t)
                return
            $elif !$plist[0]->{"dir+x"} && !$plist[1]->{"dir-x"}
                my $t="moveto, $plist[0]->{x}, $plist[0]->{y}"
                MyDef::compileutil::call_sub($t)
                my $t="lineto, $plist[1]->{x}, $plist[1]->{y}"
                MyDef::compileutil::call_sub($t)
                return

    # -----------------
    subcode: split_path
        my $has_cycle=0
        $if $param=~/\s*\.\.\s*cycle\s*$/
            $has_cycle=1
            $param=$`;
        $param=~s/--/{curl 1}..{curl 1}/g
        my @tlist=split /(\.\.(?:(?:tension|controls).*?\.\.)?)/, $param
    # ------------------
    subcode: parse_plist
        my @plist
        my $i=0
        $foreach $t in @tlist
            $if $t eq ".."
                next
            $elif $t=~/^\.\.tension\s*(.*?)\s*\.\.$/
                $call do_tension
            $elif $t=~/^\.\.controls\s*(.*?)\s*\.\.$/
                $call do_control
            $else
                $call get_t1_t2
                $call do_dir_1
                $call do_dir_2
                my ($x, $y)=parse_point($t)
                $plist[$i]->{x}=$x
                $plist[$i]->{y}=$y
                $i++


        # -------------------
        subcode: do_tension
            my $tt=$1
            $if $tt=~/^(\S+)\s*and\s*(\S+)$/
                $plist[$i-1]->{"tension+"}=>$1
                $plist[$i]->{"tension-"}=>$2
            $else
                $plist[$i-1]->{"tension+"}=>$tt
                $plist[$i]->{"tension-"}=>$tt

        subcode: do_control
            my $tt=$1
            $if $tt=~/^(\S+)\s*and\s*(\S+)$/
                my ($t1, $t2)=($1, $2)
                my ($x, $y)=parse_point($t1)
                $plist[$i-1]->{"control+x"}=>$x
                $plist[$i-1]->{"control+y"}=>$y
                my ($x, $y)=parse_point($t2)
                $plist[$i]->{"control-x"}=>$x
                $plist[$i]->{"control-y"}=>$y
            $else
                die "single control point not supported\n"

        # -------------------
        subcode: get_t1_t2
            my ($t1, $t2)
            $if $t=~/^{(.*?)}/
                $t1 = $1
                $t=$'
            $if $t=~/^(.*){(.*)}$/
                $t2 = $2
                $t = $1

            $if !$t1 && $t2
                $t1 = $t2
                undef $t2

        subcode: do_dir_1
            $if $t1
                $if $t1=~/curl\s*(\S+)/
                    $plist[$i]->{"curl-"}=$1
                    $plist[$i]->{"curl+"}=$1 unless $t2
                $else
                    my ($x, $y)=parse_point($t1)
                    $plist[$i]->{"dir-x"}=$x
                    $plist[$i]->{"dir-y"}=$y
                    $if !$t2
                        $plist[$i]->{"dir+x"}=$x
                        $plist[$i]->{"dir+y"}=$y
        subcode: do_dir_2
            $if $t2
                $if $t2=~/curl\s*(\S+)/
                    $plist[$i]->{"curl+"}=$1
                $else
                    my ($x, $y)=parse_point($t2)
                    $plist[$i]->{"dir+x"}=$x
                    $plist[$i]->{"dir+y"}=$y


fncode: parse_point($t)
    my $exp = parse_expr($t, {}, {})
    $if $exp->[1] ne "list"
        die "point parsing error: [$t]\n"

    my @t
    $for $i=0:2
        my $t=$exp->[0]->[$i]
        $if $t->[1] eq "var"
            $t[$i]=get_var_string($t)
        $elif $t->[1] eq "num"
            $t[$i]=$t->[0]
        $else
            die "parse_point illegal type [$t]\n"
    return @t


    





