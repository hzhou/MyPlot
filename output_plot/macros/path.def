fncode: parse_path($param, $info)
    macros:
        has: defined $plist->[$1]->{"$2"}

    $call check_cycle
    $param=~s/\.\.\./..tension -1../g
    $param=~s/--/{curl 1}..{curl 1}/g

    my @segments
    my @t_segs = split /\s*&\s*/, $param
    $foreach $s in @t_segs
        $call parse

    my $first_point
    my $last_point
    $foreach $plist in @segments
        my $t="$plist->[0]->{x}, $plist->[0]->{y}"
        $if $t ne $last_point
            $call Plot, moveto($t)
            $if !$first_point
                $first_point=$t
        #-------------
        $if @$plist==1 
            $if $t ne $last_point
                $call draw_point
                undef $first_point
        $elif @$plist==2 and $(has:0,x+)
            $call draw_explicit
        $elif @$plist==2 and $(has:0,arc+) and $(has:1:arc-)
            $call draw_arc
        $elif @$plist==2 and !$(has:0,dx+) and !$(has:1,dx-)
            $call draw_straight
        $else
            $call solve
            $call draw_path

    $if $has_cycle or $first_point eq $last_point
        $call Plot, close_path()

    # -----------------
    subcode: check_cycle
        my $has_cycle=0
        $if $param=~/\s*\.\.\s*cycle\s*$/
            $has_cycle=1
            $param=$`;
        $elif $param=~/\s*--\s*cycle\s*$/
            $param=$`;
            $if $param=~/(.*?)(\.\.|--)/
                $param.="--$1"

    # ---------------------------
    subcode: draw_point
        $call Plot, lineto($t)
        $last_point = $t
    subcode: draw_explicit
        my $t=""
        $t .= $plist->[0]->{"x+"}.", "
        $t .= $plist->[0]->{"y+"}.", "
        $t .= $plist->[1]->{"x-"}.", "
        $t .= $plist->[1]->{"y-"}.", "
        $last_point = $plist->[1]->{"x"}.", "
        $last_point .= $plist->[1]->{"y"}
        $call Plot, curveto($t$last_point)
    subcode: draw_arc
        my $t = $plist->[0]->{"x"}.", "
        $t .= $plist->[0]->{"y"}
        $last_point = $plist->[1]->{"x"}.", "
        $last_point .= $plist->[1]->{"y"}
        my $arc = $plist->[0]->{"arc+"}.", "
        $arc .= $plist->[1]->{"arc-"}
        $call Plot, arcto($t, $last_point, $arc)
    subcode: draw_straight
        $last_point = $plist->[1]->{"x"}.", "
        $last_point .= $plist->[1]->{"y"}
        $call Plot, lineto($last_point)
    subcode: draw_path
        $call Plot, do_path(\\\@path, 1)
        $last_point="$plist->[-1]->{x}, $plist->[-1]->{y}"

    # ---------------------------
    subcode: solve
        push @$out, "my \@path;\n"
        $foreach $t in @$plist
            my @t
            $foreach $k in sort keys %$t
                push @t, "\"$k\"=>$t->{$k}"
            push @$out, "push \@path, {".join(', ', @t)."};\n"
        push @$out, "MyPlot::solve_path(\\\@path);\n"

    # ------------------
    subcode: parse
        my $plist=[]
        my $i=0
        my @tlist=split /(\.\.(?:(?:tension|controls|arc).*?\.\.)?)/, $s
        $foreach $t in @tlist
            $if $t eq ".."
                next
            $elif $t=~/^\.\.tension\s*(.*?)\s*\.\.$/
                $call do_tension
            $elif $t=~/^\.\.controls\s*(.*?)\s*\.\.$/
                $call do_control
            $elif $t=~/^\.\.arc\s*(.*?)\s*\.\.$/
                $call do_arc
            $else
                $call do_point
                $if $i>0
                    $call check_break
                $i++

        $if $i==1 and @tlist>1
            # last break
        $else
            $call wrap_tlist

        # -------------------------------------
        subcode: check_break
            $if $(has:$i,x-) or $(has:$i,arc-)
                my $t=$plist->[$i]
                $if $i>1
                    pop @$plist
                    push @segments, $plist
                    push @segments, [$plist->[-1], $t]
                $else
                    push @segments, $plist
                $plist=[$t]
                $i=0
            $elif $(has:$i,dx-) or $(has:$i,curl-)
                my $t=$plist->[$i]
                push @segments, $plist
                $plist=[$t]
                $i=0

        subcode: wrap_tlist
            $(set:cond) join, " or "
                !$has_cycle
                $plist->[-1]->{"dx-"}
                $plist->[-1]->{"curl-"}
                $segments[0]->[0]->{"dx-"}
                $segments[0]->[0]->{"curl-"}
            $if !@segments
                $if $has_cycle
                    $plist->[0]->{cycle}=1
                push @segments, $plist
            $elif $(cond)
                push @segments, $plist
            $else
                my $tlist = shift @segments
                push @$plist, @$tlist
                push @segments, $plist

        # -------------------
        subcode: do_tension
            $call do_in_between
            $if $tt=~/^(\S+)\s*and\s*(\S+)$/
                $plist->[$i-1]->{"tension+"}=$1
                $plist->[$i]->{"tension-"}=$2
            $else
                $plist->[$i-1]->{"tension+"}=$tt
                $plist->[$i]->{"tension-"}=$tt

        subcode: do_control
            $call do_in_between
            $if $tt=~/^(\S+)\s*and\s*(\S+)$/
                my ($t1, $t2)=($1, $2)
                my ($x, $y)=parse_point($t1)
                $plist->[$i-1]->{"x+"}=$x
                $plist->[$i-1]->{"y+"}=$y
                my ($x, $y)=parse_point($t2)
                $plist->[$i]->{"x-"}=$x
                $plist->[$i]->{"y-"}=$y
            $else
                die "single control point not supported\n"

        subcode: do_arc
            $call do_in_between
            $if $tt=~/\((\S+),\s*(\S+)\s*\)/
                $plist->[$i-1]->{"arc+"}=$1
                $plist->[$i]->{"arc-"}=$2

        # ----
        subcode: do_in_between
            $if !$plist->[$i]
                $plist->[$i]={}
            my $tt=$1
        # -------------------
        subcode: do_point
            $if !$plist->[$i]
                $plist->[$i]={}
            $call get_t1_t2
            $call do_dir_1
            $call do_dir_2
            my ($x, $y)=parse_point($t)
            $plist->[$i]->{x}=$x
            $plist->[$i]->{y}=$y

            # -------------
            subcode: get_t1_t2
                my ($t1, $t2)
                $if $t=~/^{(.*?)}/
                    $t1 = $1
                    $t=$'
                $if $t=~/^(.*){(.*)}$/
                    $t2 = $2
                    $t = $1

                $if !$t1 && $t2
                    $t1 = $t2
                    undef $t2

            subcode: do_dir_1
                $if $t1
                    $if $t1=~/curl\s*(\S+)/
                        $plist->[$i]->{"curl-"}=$1
                        $if !$t2
                            $plist->[$i]->{"curl+"}=$1
                    $else
                        my ($x, $y)=parse_dir($t1)
                        $if !$t2
                            $plist->[$i]->{"dx"}=$x
                            $plist->[$i]->{"dy"}=$y
                        $else
                            $plist->[$i]->{"dx-"}=$x
                            $plist->[$i]->{"dy-"}=$y
            subcode: do_dir_2
                $if $t2
                    $if $t2=~/curl\s*(\S+)/
                        $plist->[$i]->{"curl+"}=$1
                    $else
                        my ($x, $y)=parse_dir($t2)
                        $plist->[$i]->{"dx+"}=$x
                        $plist->[$i]->{"dy+"}=$y


