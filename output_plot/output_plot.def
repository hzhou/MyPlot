include: output.def
include: macros/points.def
include: macros/path.def
include: macros/parse_common.def

include: macros/expr.def
include: macros/op.def
include: macros/equations.def
include: macros/function.def

include: macros/gstate.def
include: macros/color.def

macros:
    P: MyPlot::$1

subcode: Plot(@l)
    push @$out, "MyPlot::$(l);"

#---------------------------------------- 
page: output_plot, inherit, perl
    output_dir: lib/MyDef
    package: MyDef::output_plot
    ext: pl

#---------------------------------------- 
subcode: on_parsecode
    $if $l=~/CALLBACK\s*(\w+)\s*(.*)/
        my ($func, $param)=($1, $2)
        my $codelist=$MyDef::compileutil::named_blocks{"last_grab"}
        $call @on_callback
        return 0
    $elif $l=~/^\$(\w+)\s*(.*)/
        my ($func, $param)=($1, $2)
        $call @parse_func

#----- points ----------------------------------- 
subcode:: parse_func
    $case $func eq "set_point"
        return "CALLBACK set_point $param"

subcode:: on_callback
    $case $func eq "set_point"
        $call parse_set_point

#----- draw ----------------------------------- 
subcode:: parse_func
    $case $func =~ /^draw/
        check_default("draw")
        my $info={type=>$func}
        parse_path($param, $info)
        $call Plot, stroke()
        $if $info->{arrow_0_param}
            $call Plot, arrow($info->{arrow_0_param}, $g_hash->{linewidth}+4)
        $if $info->{arrow_1_param}
            $call Plot, arrow($info->{arrow_1_param}, $g_hash->{linewidth}+4)
        return 0
    $case $func eq "fill"
        check_default("fill")
        my $info={type=>$func}
        parse_path($param, $info)
        $call Plot, fill()
        return 0

#---- TeX -------------------------------------
subcode:: parse_func
    $case $func eq "tex"
        return "CALLBACK tex $param"

subcode:: on_callback
    $case $func eq "tex"
        $call parse_param
        $call call_tex

    # ---------------
    subcode: parse_param
        my @tlist=MyDef::utils::proper_split /,\s*/, $param
        my $pt_size=12
        my $mode="text"
        my ($x, $y)
        $foreach $t in @tlist
            $if $t=~/^(\d+)(pt)?$/
                $pt_size=$1
            $elif $t=~/^(math)$/
                $mode=$1
            $elif $t=~/^at\s*\((\S+),\s*(\S+)\)$/
                ($x, $y)=($1, $2)
        $call Plot, init_tex_font($pt_size)

    # ---------------
    subcode: call_tex
        $while $codelist->[-1]=~/^\s*$/
            pop @$codelist
        $while $codelist->[0]=~/^SOURCE/
            shift @$codelist

        my $src
        $if @$codelist==1
            my $t=$codelist->[0]
            $t=~s/\\/\\\\/g
            $t=~s/'/\\'/g
            $src="'$t'"
        $else
            push @$out, "my \$tex_src= <<'HERE'"
            push @$out, "PUSHDENT"
            $foreach $t in @$codelist
                $if $t!~/^SOURCE/
                    push @$out, $t
            push @$out, "HERE"
            push @$out, "POPDENT"
            $src = '$tex_src'
        push @$out, "my \$tex = MyPlot::format_tex(MyPlot::parse_tex($src, \"$mode\"));"
        $call Plot, tex_display(\$tex, $x, $y)

#---- label ------------------------------------ 
subcode:: parse_func
    $case $func eq "label"
        $call parse_label
        return 0

subcode: parse_label
    $if $param=~/^\[(.*?)\](.*)/
        $call @edge
    $elif $param=~/^</
        $call @angle
    $else
        $call @point

    subcode: point
        my $tail
        $if $param=~/(.*?):\s*(.*)/
            ($param, $tail)=($1, $2)
        my ($x, $y)=parse_point($param)
        my @t
        push @t, "x=>$x"
        push @t, "y=>$y"
        $if $param=~/^z(\w+)/
            push @t, "label=>\"$1\""
        $elif $param=~/^(\w+_)z(\w+)/
            push @t, "label=>\"$1_$2\""
        $else
            push @t, "label=>\"$param\""
        my $t=join(", ", @t)
        $call Plot, label_point({$t})

    subcode: edge
        my ($param, $tail)=($1, $2)
        $tail=~s/^\s*[:,]?\s*//
        my ($x1, $y1, $x2, $y2)=parse_edge($param)
        my @t
        $(for:x in x1,y1,x2,y2)
            push @t, "$(x)=>$$(x)"

        my @tlist=MyDef::utils::proper_split($tail)
        $foreach $t in @tlist
            $if $t=~/"(.*)"/
                push @t, "label=>$t"

        my $t=join(", ", @t)
        $call Plot, label_edge({$t})



