include: macros/tex_global.def
include: macros/tex_dimension.def

include: macros/tex_format.def
include: macros/tex_script.def
include: macros/tex_control.def

include: macros/tex_display.def

fncode: tex($l)
    my $ast = parse_tex($l, $tex{mode})
    my $box= format_tex($ast)
    tex_display($box)

include: perl/parse.def
#---------------------------------------- 
#- types: word, control, list, space, noop
#-        [ [list], atom ]

fncode: parse_tex($l, $mode)
    $if !$mode
        # $mode = "text"
        $mode = "math"
    $call parse_frame, strict

    subcode: post
        print_token($stack[-1])

    subcode: match
        $call brace
        &call if_lex, \\([\\_^&{}])
            $cur = [$1, "nonword"]
        &call if_lex, \\([^a-zA-Z]|[a-zA-Z0-9]+)
            $cur = [$1, "control"]
            $call @skip_1_space
            $call @check_grab
        $elif $mode eq "text"
            $call token, space, \s+
            &call if_lex, \$(.*?)\$
                $cur = parse_tex($1, "math")
            $else
                $mode="error"
        $elif $mode
            #-- math mode ----
            $call symbol, [_^&]
            $call token, number, [0-9.]+
            $call token, word, [a-zA-Z0-9]+
            $call token, nonword, [\+\-\*()\[\]!?,:;<=>\/]
            # $call token, linebreak, \n
            $call skip, \s+
            $else
                $mode="error"

    # ------------------------
    subcode: skip_1_space
        # $print control $1
        &call if_lex, \s
            # skip 1 space after control

    subcode: check_grab
        $if $1=~/^(text|eq|equation)$/
            $call grab_brace
            $cur = parse_tex($t, $1)

    # ------------------------
    subcode:: init
        my @hold_stack
        my $cur_hold=0

        my @group_stack

    subcode: process_eof
        my @t=@stack
        @stack=([\@t, $mode])

    subcode: process
        # $print process cur type: $(cur_type)
        $if $(cur_type) eq "t{"
            $call push_group
        $elif $(cur_type) eq "}"
            $call pop_group
        $elif $hold_hash{$(cur_type)}
            $call new_hold, $hold_hash{$(cur_type)}
        $elif $(cur_type) eq "control" and $hold_hash{$(cur_atom)}
            $call new_hold, $hold_hash{$(cur_atom)}
        $elif $cur_hold>0
            $if $(cur_type) eq "space"
                next
            $else
                $call push_hold

        # ---- group -------
        subcode: push_group
            my $n=@stack
            push @group_stack, $n
            push @hold_stack, $cur_hold
            $cur_hold=0
            next

        subcode: pop_group
            $cur_hold=pop @hold_stack
            my $n=pop @group_stack
            my @t=splice @stack, $n
            $if @t==0
                $cur=[undef, "noop"]
            $elif @t==1
                $cur=$t[0]
            $else
                $cur=[\@t, "list"]
            goto process

        # ---- hold is for function---------
        subcode: new_hold(hold)
            push @hold_stack, $cur_hold
            $cur_hold=$(hold)
            # prepend '/' to avoid hold_hash
            $(cur_type)='/'.$(cur_atom)
            $(cur_atom)=[]

        subcode: push_hold
            push @{$(atom:-1)}, $cur
            $cur_hold--
            $if $cur_hold==0
                $cur_hold=pop @hold_stack
                $cur = pop @stack
                goto process
            $else
                next

