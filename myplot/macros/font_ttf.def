#---------------------------------------- 
#---- TrueType Font -----

fncode: load_ttf($font, $ttf)
    $call get_file_in_t, $ttf
    $font->{ttf}=\$t
    $call load_ttf_tables
    $call parse_name
    $call parse_head # em, xmin, ymin, xmax, ymax
    $call parse_hhea # hmtx_count, ascent, descent
    $call parse_maxp # count
    $call parse_cmap
    $call parse_hmtx
    $call parse_loca

    # --------------------------------------------------
    subcode: parse_name
        &call read_ttf_table, name
            my ($format, $count, $string_offset)=unpack("S>S>S>", substr($t, $off, 6))
            $for $i=0:$count
                my ($id1, $id2, $id3, $id4, $len, $offset)=unpack("S>S>S>S>S>S>", substr($t, $off+6+12*$i, 12))
                my $s=substr($t, $off+$string_offset+$offset, $len)
                $s=~s/\0//g
                # $print "$id1-$id4:$s"
                $if $id4==4
                    $font->{fontname}=$s
                $elif $id4==6
                    $font->{BaseFont}="/$s"
                    last

    subcode: parse_head
        &call read_ttf_table, head
            $font->{em}=unpack("S>", substr($t, $off+18, 2))
            my @t=unpack("s>s>s>s>", substr($t, $off+36, 8))
            $font->{FontBBox}="[".join(' ', @t)."]"
            $font->{loca_long}=unpack("s>", substr($t, $off+50, 2))

    subcode: parse_hhea
        &call read_ttf_table, hhea
            my ($ascent, $descent)=unpack("s>s>", substr($t, $off+4, 4))
            $font->{Ascent}=$ascent
            $font->{Descent}=$descent
            $font->{hmtx_count}=unpack("S>", substr($t, $off+34, 2))

    subcode: parse_maxp
        &call read_ttf_table, maxp
            $font->{count}=unpack("S>", substr($t, $off+4, 2))

    subcode: parse_cmap
        &call read_ttf_table, cmap
            my $ncmap=unpack("s>", substr($t, $off+2, 2));
            $for $i=0:$ncmap
                my ($platform, $encoding, $offset)=unpack("S>S>I>", substr($t, $off+4+$i*8, 8));
                my ($format, $length, $lang)=unpack("S>S>S>", substr($t, $off+$offset, 6));
                $if $format==0
                    $call load_ttf_cmap_0
                    last
                $elif $format==4
                    $call load_ttf_cmap_4
                    last

    subcode: parse_hmtx
        &call read_ttf_table, hmtx
            $if $font->{hmtx_count}==1
                $font->{isfixed}=1
                ($font->{width})=unpack("S>", substr($t, $off, 2))
            $else
                my @metrics
                $for $i=$font->{hmtx_count}
                    push @metrics, unpack("S>", substr($t, $off+4*$i, 2))
                $font->{metrics}=\@metrics

    subcode: parse_loca
        &call read_ttf_table, loca
            my $off_glyf=$dir{glyf}->{offset}
            my @loca
            $if $font->{loca_long}
                $for $i=0:$font->{count}+1
                    my $o= unpack("I>", substr($t, $off+4*$i, 4))
                    push @loca, $off_glyf+$o
            $else
                $for $i=0:$font->{count}+1
                    my $o= unpack("S>", substr($t, $off+2*$i, 2))
                    push @loca, $off_glyf+$o*2
            $font->{loca_list}=\@loca


    # -------------------------------------------------
    subcode: load_ttf_tables
        my ($num_tables)=unpack("S>", substr($t, 4, 2));

        my %dir;
        my $pos=12
        $for $i=0:$num_tables
            my $tag=substr($t, $pos, 4);
            my ($offset, $size)=unpack("I>I>", substr($t, $pos+8, 8));
            $pos+=16;
            $dir{$tag}={offset=>$offset, size=>$size};

    subcode: read_ttf_table(tag)
        my $tag="$(tag)";
        $if $dir{$tag}
            my $off=$dir{$tag}->{offset};
            my $size=$dir{$tag}->{size};
            BLOCK

    # ---------------------------------------- 
    subcode: load_ttf_cmap_0
        my @map=unpack("C*", substr($t, $pos+$offset+6, 256))
        my $start=0
        my $count=256
        $for $i=0:256
            $if $map[$i]>0
                $start=$i
                last
        $for $i=256:0
            $if $map[$i]>0
                $count=$i-$start+1
        $font->{start}=$start
        $font->{count}=$count

    subcode: load_ttf_cmap_4
        my (@cmap, @deltas)
        my $t_off=$off+$offset
        my ($segcount, $searchrange)=unpack("S>S>", substr($t, $t_off+6, 4))
        $t_off+=14
        $call unpack_next, @endcodes, "S>*", $segcount
        $t_off+=2
        $call unpack_next, @startcodes, "S>*", $segcount
        $call unpack_next, @deltas, "s>*", $segcount
        $call unpack_only, @rangeoffsets, "S>*", $segcount
        my $count=0
        $for $i=0:@startcodes
            push @cmap, $startcodes[$i]
            push @cmap, $endcodes[$i]
            $count+=($endcodes[$i]-$startcodes[$i]+1)
            $if $rangeoffsets[$i]
                $rangeoffsets[$i]+=$i*2+$t_off

        $font->{cid}=4
        $font->{cmap}=\@cmap
        $font->{"cmap-deltas"}=\@deltas
        $font->{"cmap-rangeoffsets"}=\@rangeoffsets
        $font->{count}=$count
    # ---------------------------------------- 
    # ---------------------------------------- 
    subcode: unpack_only(v, fmt, size)
        my $(v)=unpack($(fmt), substr($t, $t_off, $(size)))

    subcode: unpack_next(v, fmt, size)
        my $(v)=unpack($(fmt), substr($t, $t_off, $(size)))
        $t_off+=$(size)


subcode:: get_cid_cases
    $case $font->{cid}==4
        my $cmap=$font->{cmap}
        my $n=@$cmap
        $for $i=0:$n:2
            $if $c<$cmap->[$i]
                return 0
            $elif $c<=$cmap->[$i+1]
                my $j=$i/2
                $if $font->{"cmap-rangeoffsets"}->[$j]==0
                    return ($c+$font->{"cmap-deltas"}->[$j]) & 0xffff
                $else
                    my $t_off=$font->{"cmap-rangeoffsets"}->[$j]+($c-$cmap->[$i])*2
                    my $t=substr($font->{ttf}, $t_off, 2)
                    return unpack("S>", $t)
        return 0

fncode: draw_icon($font, $c, $size)
    my $idx = get_cid($font, $c)
    my $off = $font->{loca_list}->[$idx]
    my $size = $font->{loca_list}->[$idx+1]-$off
    # printf "%X --> $idx, $off [$size]\n", $c
    my $t=substr(${$font->{ttf}}, $off, $size)
    my ($num_contours,$x0,$y0,$x1,$y1)=unpack("s>S>S>S>S>", $t)

    $t=substr($t, 10)
    my @contour_stop
    $for $i=0:$num_contours
        my $n=unpack("S>", substr($t, $i*2, 2))
        push @contour_stop, $n
    my $totalpoints=$contour_stop[-1]+1
    # $print "$num_contours contours, [$x0 $y0 $x1 $y1], $totalpoints points"

    $t=substr($t, $num_contours*2)
    my $n_instuctions=unpack("S>", $t)
    $t=substr($t, $n_instuctions+2)

    $call scan_flags
    $call draw_contours

    subcode: scan_flags
	my ($fsize, $xsize, $ysize);
        my (@xflags, @yflags, @on_curves)
        my $i=0
        $while $i<$totalpoints
	    my $flag=unpack("C", substr($t, $fsize, 1));
	    my $unit=0;
	    my $xflag=$flag & 0x12;
	    $if $xflag==0x12 or $xflag==0x02
		$unit=1;
	    $elif $xflag==0
		$unit=2;

            my $yflag=($flag & 0x24)>>1

            my $rep=1
            $fsize++
	    $if $flag&0x08
		$rep=unpack("C", substr($t, $fsize, 1))+1
		$fsize++

            $i+=$rep
            $xsize+=$unit*$rep
            $for $j=0:$rep
                push @xflags, $xflag
                push @yflags, $yflag
                push @on_curves, $flag & 1

        my $tx=substr($t, $fsize, $xsize)
        my $ty=substr($t, $fsize+$xsize)
        # printf("xsize: $xsize; ysize: %d\n", length($ty))

    subcode: draw_contours
        my $scale=$size/$font->{em}
        my $i_pt=0
        ($xsize, $ysize)=(0,0)
        my ($x, $y)=(0,0)
        $for $i=0:$num_contours
            my ($x00, $y00)
            my ($x0,$y0, $x1,$y1, $x2,$y2, $x3, $y3)
            $while $i_pt<=$contour_stop[$i]
                $call get_delta, x
                $call get_delta, y
                # $print " pt $i_pt: $x, $y, ($xflags[$i_pt], $yflags[$i_pt], $on_curves[$i_pt]) ($xsize, $ysize)"

                $if $on_curves[$i_pt]
                    $if !defined $x0
                        ($x0,$y0)=($x*$scale, $y*$scale)
                        ($x00, $y00)=($x0, $y0)
                        MyPlot::moveto($x0,$y0)
                    $else
                        ($x2,$y2)=($x*$scale, $y*$scale)
                        draw_curve_2($x0,$y0,$x1,$y1,$x2,$y2)
                        ($x0, $y0)=($x2,$y2)
                        undef $x1
                $elif !$on_curves[$i_pt-1]
                    $x3=$x*$scale
                    $y3=$y*$scale
                    $x2=($x1+$x3)/2
                    $y2=($y1+$y3)/2
                    draw_curve_2($x0,$y0,$x1,$y1,$x2,$y2)
                    ($x0, $y0)=($x2,$y2)
                    ($x1, $y1)=($x3,$y3)
                $else
                    ($x1,$y1)=($x*$scale, $y*$scale)

                $i_pt++
            $if !$on_curves[$i_pt-1]
                ($x2, $y2)=($x00, $y00)
                draw_curve_2($x0,$y0,$x1,$y1,$x2,$y2)
            MyPlot::close_path()

    subcode: get_delta(x)
        my $d$(x)=0
        $if $$(x)flags[$i_pt] & 0x2
            $d$(x) = unpack("C", substr($t$(x), $$(x)size, 1))
            $if ($$(x)flags[$i_pt] & 0x10) ==0
                $d$(x) = -$d$(x)
            $$(x)size++
        $elif ($$(x)flags[$i_pt] & 0x10) == 0
            $d$(x) = unpack("s>", substr($t$(x), $$(x)size, 2))
            $$(x)size+=2
        $$(x)+=$d$(x)

fncode: draw_curve_2($x0, $y0, $x1, $y1, $x2, $y2)
    $if !defined $x1
        MyPlot::lineto($x2,$y2)
    $else
        my $x01=$x0+($x1-$x0)*2/3
        my $y01=$y0+($y1-$y0)*2/3
        my $x12=$x2+($x1-$x2)*2/3
        my $y12=$y2+($y1-$y2)*2/3
        MyPlot::curveto($x01,$y01,$x12,$y12,$x2,$y2)






