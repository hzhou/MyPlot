#---------------------------------------- 
fncode: text_width($str, $font, $font_size)
    #--- parse into code list ------
    my @codelist
    &call parse_loop, $str
        &call if_lex, (([^\\])+)
            push @codelist, unpack("U*", $1)
        &call if_lex, \\(\d\di?\d?)
            push @codelist, oct("0$1")
        &call if_lex, \\(.)
            $(for:n in n,r,t,b,f)
                $case $1 eq '$(n)'
                    push @codelist, ord("\$(n)")
                $else
                    push @codelist, ord($1)
    # --- add up the widths ----
    my $scale=$font_size/$font->{em}
    $if $font->{isfixed}
        return $font->{width}*scalar(@codelist)*$scale
    $else
        my $widths = $font->{widths}
        my $sum=0
        $foreach $c in @codelist
            my $cid=get_cid($font, $c)
            $if $cid>0
                $sum+=$widths->[$cid]
            $else
                $sum+=$widths->[0]
        return $sum*$scale

fncode: tex_size($c, $font, $font_size)
    my $cid=get_cid($font, $c)
    my $scale = $font_size/$font->{em}
    my $w=$font->{widths}->[$cid]*$scale
    my $t=$font->{tops}->[$cid]*$scale
    my $b=$font->{bottoms}->[$cid]*$scale
    return ($w, $t, $b)

#---------------------------------------- 
fncode: format_word($str, $font, $font_size)
    my $box = {type=>"word", font=>$font, size=>$font_size}
    my $skew=$font->{skew}
    $if !$font
        die "format_word: missing font\n"
    $elif $font->{slanted}
        $font=$font->{base}
    my $len = length($str)
    $(for:w in widths, tops, bottoms)
        my $$(w) = $font->{$(w)}
    my $scale = $font_size/$font->{em}

    my ($width, $top, $bottom)=(0,0,0)
    $for $i=0:$len
        my $c = substr($str, $i, 1)
        my $cid = get_cid($font, $c)
        $if $cid>0
            $call add, width
            $call max, top
            $call min, bottom
            $if $i==$len-1 and $skew
                $box->{italic_adjust} = $tops->[$cid]*$scale*$skew
        $else
            # empty

    $box->{text}=$str
    $box->{width}=$width * $scale
    $box->{top}=$top * $scale
    $box->{bottom}=$bottom * $scale

    # $call debug_box
    return $box

    # ----------------------
    subcode: add(var)
        $$(var) += $$(var)s->[$cid]
    subcode: max(var)
        $if $$(var) < $$(var)s->[$cid]
            $$(var) = $$(var)s->[$cid]
    subcode: min(var)
        $if $$(var) > $$(var)s->[$cid]
            $$(var) = $$(var)s->[$cid]

    # ---------------
    subcode: debug_box
        $print $box: $box->{width} - $box->{top} - $box->{bottom}

