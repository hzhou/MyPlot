fncode: stroke_gray($f)
    push @$page_content, "$f G"
fncode: stroke_rgb($r, $g, $b)
    push @$page_content, "$r $g $b RG"
fncode: fill_gray($f)
    push @$page_content, "$f g"
fncode: fill_rgb($r, $g, $b)
    push @$page_content, "$r $g $b rg"

#---- path  ------------------------------------ 
fncode: moveto($x, $y)
    push @$page_content, "$x $y m"

fncode: lineto($x, $y)
    push @$page_content, "$x $y l"

fncode: curveto($x1, $y1, $x2, $y2, $x3, $y3)
    push @$page_content, sprintf("%.2f %.2f %.2f %.2f %.2f %.2f c", $x1, $y1, $x2, $y2, $x3, $y3)

fncode: arcto($x1,$y1,$x2,$y2,$t1,$t2)
    my $tm=($t1+$t2)/2
    my $c1=cos($t1*$(to_rad))
    my $c2=cos($t2*$(to_rad))
    my $s1=sin($t1*$(to_rad))
    my $s2=sin($t2*$(to_rad))
    my $r
    my $steep
    $if abs($c2-$c1)>abs($s2-$s1)
        $r = ($x2-$x1)/($c2-$c1)
    $else
        $steep=1
        $r = ($y2-$y1)/($s2-$s1)
    my $x0=$x1-$c1*$r
    my $y0=$y1-$s1*$r
    my $xm=$x0+$r*cos($tm*$(to_rad))
    my $ym=$y0+$r*sin($tm*$(to_rad))
    $if abs($t2-$t1)>90
        my $tm=($t1+$t2)/2
        arcto($x1,$y1,$xm,$ym,$t1,$tm)
        arcto($xm,$ym,$x2,$y2,$tm,$t2)
    $else
        #-- cos(t+90) = - sin(t)
        #-- sin(t+90) = cos(t)
        my $a
        $if $steep
            $a = (2*$xm-$x1-$x2)*4/3/($s2-$s1)
        $else
            $a = (2*$ym-$y1-$y2)*4/3/($c1-$c2)
        #-- x1 + a cos(t+90)
        my $cx1 = $x1-$a*$s1
        my $cy1 = $y1+$a*$c1
        my $cx2 = $x2+$a*$s2
        my $cy2 = $y2-$a*$c2
        curveto($cx1,$cy1,$cx2,$cy2,$x2,$y2)

fncode: close_path
    push @$page_content, "h"

fncode: do_path($path, $skip_first)
    my $n=@$path
    $(set:p=$path->[$i]->{"$1"})
    $(set:p2=$path->[$i+1]->{"$1"})
    $(set:p0=$path->[0]->{"$1"})
    $(set:pn=$path->[$n-1]->{"$1"})
    $if !$skip_first
        moveto($(p0:x), $(p0:y))
    $for $i=0:$n-1
        $if $(p:x+)
            curveto($(p:x+), $(p:y+), $(p2:x-), $(p2:y-), $(p2:x), $(p2:y))
        $else
            lineto($(p2:x), $(p2:y))
    $if $(p0:cycle)
        curveto($(pn:x+), $(pn:y+), $(p0:x-), $(p0:y-), $(p0:x), $(p0:y))
    $if $(p0:close)
        lineto($(p0:x), $(p0:y))

#---- graphics -----------------------------
fncode: line_width($w)
    push @$page_content, "$w w"

fncode: line_cap($m)
    $global %linecaps=(butt=>0, round=>1, square=>2)
    my $linecap
    $if $m>0
        $linecap=$m
    $elif exists $linecaps{$m}
        $linecap=$linecaps{$m}
    $else
        $linecap=0
    push @$page_content, "$linecap J"

fncode: line_join($m)
    $global %linejoins=(miter=>0, round=>1, bevel=>2)
    my $linejoin
    $if $m>0
        $linejoin=$m
    $elif exists $linejoins{$m}
        $linejoin=$linejoins{$m}
    $else
        $linejoin=0
    push @$page_content, "$linejoin j"

fncode: line_dash($m)
    my $linedash
    $if $m==1
        $linedash="3"
    $elif $m==2
        $linedash="6 3"
    $elif $m==3
	$linedash="8 7 2 7"
    $else
        $linedash=""
    push @$page_content, "[$linedash] 0 d"

#---------------------------------------- 
fncode: save_state
    push @$page_content, "q"

fncode: restore_state
    push @$page_content, "Q"

fncode: set_matrix
    my $fmt="%.2f " x 6
    push @$page_content, sprintf("$fmt cm", @_)

fncode: stroke
    push @$page_content, "S"

fncode: fill
    push @$page_content, "f"

fncode: fillstroke
    push @$page_content, "B"

fncode: clip
    push @$page_content, "W n"

fncode: clipstroke
    push @$page_content, "W S"

