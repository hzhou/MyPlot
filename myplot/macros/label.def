fncode: label_point($h)
    $call get_label_font
    my ($x, $y)=($h->{x}, $h->{y})
    $call circle_point

    &call with_label_string
        $call get_h_opt, place, "d"
        $if $place eq "d"
            $x -= $w/2
            $y -= $font_size*1.5
            text_at($x, $y, $s)
        
    # -------------
    subcode: circle_point
        $call get_h_opt, w, 4
        moveto($x, $y-$w)
        curveto($x+1.5*$w, $y-$w, $x+1.5*$w, $y+$w, $x, $y+$w)
        curveto($x-1.5*$w, $y+$w, $x-1.5*$w, $y-$w, $x, $y-$w)
        close_path()
        fill()

    # -------------

fncode: label_edge($h)
    $call get_label_font
    $(for:x in x1,y1,x2,y2)
        my $$(x)=$h->{$(x)}

    my $x=($x1+$x2)/2
    my $y=($y1+$y2)/2

    my $slope=atan2($y2-$y1, $x2-$x1)*180/3.14159265
    $if $slope<0
        ($x1, $x2)=($x2, $x1)
        ($y1, $y2)=($y2, $y1)
        $slope+=180

    &call with_label_string
        $if $slope <5
            $x -= $w/2
            $y += $w/2*($y2-$y1)/($x2-$x1)+$font_size/2
            text_at($x, $y, $s)
        $else
            $x += $font_size/2 *($x2-$x1)/($y2-$y1)+$font_size/2
            $y -= $font_size/2
            text_at($x, $y, $s)

#---------------------------------------- 
subcode: get_h_opt(v, default)
    my $$(v)=$h->{"$(v)"}
    $if !defined $$(v)
        $$(v)=$(default)

subcode: get_label_font
    $call get_h_opt, font_size, 12
    my $ft=find_font($config{label_font})
    set_font($config{label_font}, $font_size)

subcode: with_label_string
    $if defined $h->{label}
        my $s=$h->{label}
        my $w=text_width($s, $ft, $font_size)
        BLOCK
#---------------------------------------- 
fncode: draw_points($path)
    my $n=@$path
    save_state($page_content)

    stroke_color($page_content, "black")
    $(set:p=$path->[$i]->{"$1"})

    $(if:0)
        my $ft = find_font("Helvetica")
        push @$page_content, "/$ft->{Name} 8 Tf"

    $for $i=0:$n
        $(if:0)
            text_at($page_content, $(p:x)+10, $(p:y)+5, $i+1)
        line_width($page_content, 4)
        moveto($page_content, $(p:x), $(p:y))
        lineto($page_content, $(p:x), $(p:y))
        push @$page_content, "S"
        line_width($page_content, 2)
        $if defined $(p:x+)
            moveto($page_content, $(p:x+), $(p:y+))
            lineto($page_content, $(p:x+), $(p:y+))
            push @$page_content, "S"
        $if defined $(p:x-)
            moveto($page_content, $(p:x-), $(p:y-))
            lineto($page_content, $(p:x-), $(p:y-))
            push @$page_content, "S"

    restore_state($page_content)

fncode: arrow($path)
    my $p=$path->[-1]

    my ($x, $y)=($p->{x}, $p->{y})
    my ($dx, $dy)

    $if defined $p->{"x-"} and defined $p->{"y-"}
        $dx = $x - $p->{"x-"}
        $dy = $y - $p->{"y-"}
        $call normalize_dx_dy
    $elif defined $p->{"dx-"} and defined $p->{"dy-"}
        ($dx, $dy)=($p->{"dx-"}, $p->{"dy-"})
    $elif $path->[-2]
        $dx = $x - $path->[-2]->{x}
        $dy = $y - $path->[-2]->{y}
        $call normalize_dx_dy

    subcode: normalize_dx_dy
        my $d=sqrt($dx**2+$dy**2)
        $if $d>0
            $dx/=$d
            $dy/=$d
        $else
            undef $dx



